<!-- 
    样式（普通 、内置样式包括：sumbit cancel outline 注意：混合使用时outline必需在最后）；
    box公共样式;
    
    
    color:按钮文字颜色（可以通过js修改）；
    color-click:按钮文字点击颜色 默认白色；
    background-color：按钮背景颜色 （可以通过js修改）；
    background-color-click：按钮背景点击色；
    border-color:边框颜色（可以通过js修改）；
    border-color-click：按钮边框点击色；
    tip-color：小气泡字体颜色 （可以通过js修改）；
    tip-background-color：小气泡背景色 （可以通过js修改）；
    font-size: 按钮字体大小（可以通过js修改）；
    licon-width: 按钮左侧图片宽度（可以通过js修改）
    licon-height: 按钮左侧图片高度（可以通过js修改）
    ricon-width: 按钮右侧图片宽度（可以通过js修改）
    ricon-height: 按钮右侧图片高度（可以通过js修改）

    属性：
    builtInClass 使用内置样式
    value：按钮文字（可以通过js修改）；
    tip：小气泡数字（可以通过js修改）；
    licon；按钮上的图片（可以通过js修改）；
    ricon；按钮上的图片（可以通过js修改）；
    readonly:只读（可以通过js修改）；
    loading:加载等待，取值true和false （可以通过js修改）；

    方法：
    box公共方法；
    click(): 模拟按钮点击方法，可以js模拟点击按钮效果；

    事件：
    box公共事件；
    change事件：监听button属性修改；
 -->
<page>
    <module>
        <![CDATA[
    
    ]]>
    </module>
    <script>
        <![CDATA[
            var document = require("Document");
            var window = require("Window");
            var time = require("Time");
            var console = require("Console");
            var ui = require("UI");

            function aniCallBack() {

            }

            var Button = function() {

                this.box = null;
                this.btn = null;
                this.text = null;
                this.tiptext = null;
                this.tipbox = null;
                this.btn_image = null;
                this.btn_rimage = null;
                this.fontText = null;
                this.loadingimage = null;
                this.btn_content = null;
                this.readonlydom = null;

                this.backgroundColor = "#549FF7";
                this.backgroundClickColor = "#295b9d";
                this.borderColor = "#549FF7";
                this.borderClickColor = "#295b9d";
                this.color = "#ffffff";
                this.colorClick = "#ffffff";
                this.tipColor = "#ffffff";
                this.tipbackgroundColor = "red";
                this.fontSize = "16";
                this.liconWidth = "24";
                this.liconHeight = "24";
                this.riconWidth = "24";
                this.riconHeight = "24";

                this.readonly = "false";
                this.value = "";
                this.tip = "0";
                this.licon = "";
                this.ricon = "";

                this.loading = "false";
                this.taginit = true;
                this.classStyle = "";
                this.pathLocation = "";

            };



            Button.prototype = {

                created: function() {

                    //这里是得到组件所在的uixml页面的绝对路径目录
                    this.pathLocation = document.getPathLocation();
                    this.readonlydom = this.getElement("readonly");
                    this.box = this.getElement("ctrlbox");
                    this.btn = this.getElement("btn");
                    this.text = this.getElement("text");
                    this.tiptext = this.getElement("tiptext");
                    this.tipbox = this.getElement("tipbox");
                    this.btn_image = this.getElement("btn_image");
                    this.btn_rimage = this.getElement("btn_rimage");
                    this.loadingimage = this.getElement("loadingimage");

                    this.btn_content = this.getElement("btn_content");
                    if (this.getClassStyle() != null) {
                        this.classStyle = this.getClassStyle();
                    }

                    this.init();
                    var copythis = this;
                    this.btn.on("touchDown", function(e, param) {

                        if (copythis.readonly == "false") {
                            var jsonData = {};
                            var aniAry = new Array();
                            var jsonAni1 = {};
                            jsonAni1.delay = 0;
                            jsonAni1.duration = 200;
                            jsonAni1.curve = "linear";
                            jsonAni1.props = {};
                            jsonAni1.props.backgroundColor = copythis.backgroundClickColor;
                            aniAry.push(jsonAni1);
                            jsonData.animators = aniAry;
                            copythis.box.startAnimator(jsonData, function() {


                            });
                            copythis.text.setStyle("color", copythis.colorClick);
                            copythis.box.setStyle("border-color", copythis.borderClickColor);
                            copythis.box.setStyle("opacity", "1");
                            copythis.box.releaseAnimator();
                        }

                    });

                    this.btn.on("touchUp", function(e) {
                        if (copythis.readonly == "false") {

                            var jsonData = {};
                            var aniAry = new Array();
                            var jsonAni1 = {};
                            jsonAni1.delay = 0;
                            jsonAni1.duration = 50;
                            jsonAni1.curve = "linear";
                            jsonAni1.props = {};
                            jsonAni1.props.backgroundColor = copythis.backgroundColor;
                            aniAry.push(jsonAni1);
                            jsonData.animators = aniAry;
                            copythis.box.startAnimator(jsonData, function() {
                                //copythis.box.releaseAnimator();

                            });
                            copythis.text.setStyle("color", copythis.color);
                            copythis.box.setStyle("opacity", "1");
                            copythis.box.setStyle("border-color", copythis.borderColor);
                            //这里释放动画，以便后续可以对该控件进行刷新
                            copythis.box.releaseAnimator();
                        }

                    });
                    this.btn.on("touchCancel", function(e) {
                        if (copythis.readonly == "false") {
                            var jsonData = {};
                            var aniAry = new Array();
                            var jsonAni1 = {};
                            jsonAni1.delay = 0;
                            jsonAni1.duration = 200;
                            jsonAni1.curve = "linear";
                            jsonAni1.props = {};
                            jsonAni1.props.backgroundColor = copythis.backgroundColor;
                            aniAry.push(jsonAni1);
                            jsonData.animators = aniAry;
                            copythis.box.startAnimator(jsonData, aniCallBack);
                            copythis.text.setStyle("color", copythis.color);
                            copythis.box.setStyle("opacity", "1");
                            copythis.box.setStyle("border-color", copythis.borderColor);

                            //这里释放动画，以便后续可以对该控件进行刷新
                            copythis.box.releaseAnimator();

                        }

                    });



                },
                init: function() {

                    this.taginit = true;


                    if (this.getAttr("builtInClass") != null) {

                        if ((this.getAttr("builtInClass")).indexOf("outline") > -1 && (this.getAttr("builtInClass")).indexOf("submit") < 0 && (this.getAttr("builtInClass")).indexOf("cancel") < 0) {
                            this.setClassStyle(this.classStyle + " outline", this);
                            this.classStyle = this.classStyle + " outline";
                        }

                        if ((this.getAttr("builtInClass")).indexOf("submit") > -1) {

                            this.setClassStyle(this.classStyle + " submit", this);

                            this.classStyle = this.classStyle + " submit";


                        } else if ((this.getAttr("builtInClass")).indexOf("submit") > -1 && this.getAttr("builtInClass").indexOf("outline") > -1) {

                            this.setClassStyle(this.classStyle + " submit outline outline-submit-text", this);

                            this.classStyle = this.classStyle + "  submit outline outline-submit-text";
                        }

                        if ((this.getAttr("builtInClass")).indexOf("cancel") > -1) {

                            this.setClassStyle(this.classStyle + " cancel", this);
                            this.classStyle = this.classStyle + "  cancel";
                        } else if ((this.getAttr("builtInClass")).indexOf("cancel") > -1 && this.classStyle.indexOf("outline") > -1) {
                            this.setClassStyle(this.classStyle + " cancel outline outline-cancel-text", this);
                            this.classStyle = this.classStyle + "   cancel outline outline-cancel-text";
                        }
                    }

                    if (this.getAttr("readonly") != null) {
                        this.setAttr("readonly", this.getAttr("readonly"));
                    }


                    //设置按钮的value值
                    if (this.getAttr("value") != null) {
                        this.setAttr("value", this.getAttr("value"));
                    }

                    if (this.getStyle("color") != null) {
                        this.setStyle("color", this.getStyle("color"));
                    }

                    if (this.getStyle("color-click") != null) {
                        this.setStyle("color-click", this.getStyle("color-click"));
                    }

                    if (this.getStyle("background-color") != null) {
                        this.setStyle("background-color", this.getStyle("background-color"));
                    }

                    if (this.getStyle("background-color-click") != null) {
                        this.setStyle("background-color-click", this.getStyle("background-color-click"));
                    }

                    if (this.getStyle("border-color-click") != null) {
                        this.setStyle("border-color-click", this.getStyle("border-color-click"));
                    }


                    if (this.getStyle("border-color") != null) {
                        this.setStyle("border-color", this.getStyle("border-color"));
                    }


                    if (this.getStyle("licon-width") != null) {
                        this.setStyle("licon-width", this.getStyle("licon-width"));
                    }

                    if (this.getStyle("licon-height") != null) {
                        this.setStyle("licon-height", this.getStyle("licon-height"));
                    }
                    if (this.getStyle("ricon-width") != null) {
                        this.setStyle("ricon-width", this.getStyle("ricon-width"));
                    }


                    if (this.getStyle("ricon-height") != null) {
                        this.setStyle("ricon-height", this.getStyle("ricon-height"));
                    }



                    if (this.getAttr("tip") != null) {
                        this.setAttr("tip", this.getAttr("tip"));
                    }

                    if (this.getAttr("licon") != null) {
                        this.setAttr("licon", this.getAttr("licon"));
                    }

                    if (this.getAttr("ricon") != null) {
                        this.setAttr("ricon", this.getAttr("ricon"));
                    }

                    if (this.getStyle("tip-background-color") != null) {
                        this.setStyle("tip-background-color", this.getStyle("tip-background-color"));
                    }

                    if (this.getStyle("tip-color") != null) {
                        this.setStyle("tip-color", this.getStyle("tip-color"));
                    }


                    if (this.getStyle("font-size") != null) {
                        this.setStyle("font-size", this.getStyle("font-size"));
                    }


                    if (this.getAttr("loading") != null) {
                        this.setAttr("loading", this.getAttr("loading"));
                    }


                    if (this.getStyle("width") != null) {

                        this.btn_content.setStyle("flex", "1");
                        this.text.setStyle("flex", "1");

                    }



                    if (this.getStyle("flex") != null) {

                        this.btn_content.setStyle("flex", "1");
                        this.text.setStyle("flex", "1");
                    }

                    if (this.getParent() != null) {
                        if (this.getParent().getStyle("flex-direction") != "row") {

                            this.btn_content.setStyle("flex", "1");
                            //this.text.setStyle("flex", "1");
                        }
                    }
                    this.taginit = false;
                },
                click: function() {
                    var copythis = this;
                    this.fire("touchDown");
                    time.setTimeout(function() {
                        copythis.fire("touchUp");

                        copythis.fire("click");


                    }, 200);


                },
                //属性变更回调函数
                attrChanged: function(attrName, attrValue) {
                    var changetag = false;
                    if (this.taginit == false) {

                        if (this.getAttr(attrName) != this[attrName] && this.getAttr(attrName) != null) {
                            //this.fire("change");
                            changetag = true;
                        }

                    }


                    if (attrName == "value") {
                        if (attrValue != null) {
                            this.value = attrValue;
                        }

                        this.text.setText(this.value);
                        if (this.taginit == false) {
                            this.refresh();
                        }
                    }

                    if (attrName == "readonly") {

                        if (attrValue != null) {
                            this.readonly = attrValue;
                        }
                        if (this.readonly == "true") {

                            this.readonlydom.setStyle("visibility", "visible");
                        } else {
                            this.readonlydom.setStyle("visibility", "hidden");
                        }



                    }

                    if (attrName == "tip") {
                        if (attrValue != null) {
                            this.tip = attrValue;
                            this.tiptext.setText(attrValue);
                            this.tipbox.setStyle("display", "block");
                        } else {

                            this.tipbox.setStyle("display", "none");

                        }
                        if (this.taginit == false) {
                            this.refresh();
                        }
                    }


                    if (attrName == "licon") {

                        if (attrValue != null) {
                            if (attrValue.indexOf("res:") > -1 || attrValue.indexOf("http://") > -1 || attrValue.indexOf("https://") > -1) {
                                this.licon = attrValue;
                            } else {
                                this.licon = this.pathLocation + "/" + attrValue;
                            }

                            this.btn_image.setAttr("src", this.licon);
                            this.btn_image.setStyle("display", "block");
                        } else {

                            this.btn_image.setStyle("display", "none");

                        }

                        if (this.taginit == false) {
                            this.refresh();
                        }
                    }

                    if (attrName == "ricon") {

                        if (attrValue != null) {
                            //通过js进来的图片地址，都认为是基于uixml页面的相对路径，符合开发者思维
                            if (attrValue.indexOf("res:") > -1 || attrValue.indexOf("http://") > -1 || attrValue.indexOf("https://") > -1) {
                                this.ricon = attrValue;
                            } else {
                                this.ricon = this.pathLocation + "/" + attrValue;
                            }
                            this.btn_rimage.setAttr("src", this.ricon);
                            this.btn_rimage.setStyle("display", "block");
                        } else {
                            this.btn_rimage.setStyle("display", "none");
                        }

                        if (this.taginit == false) {
                            this.refresh();
                        }
                    }

                    if (attrName == "loading") {
                        if (attrValue != null) {
                            this.loading = attrValue;
                        }
                        if (this.loading == "true") {
                            this.loadingimage.setStyle("display", "block");
                        } else {
                            this.loadingimage.setStyle("display", "none");
                        }

                        if (this.taginit == false) {
                            this.refresh();
                        }
                    }




                    if (changetag == true) {
                        this.fire("change");
                    }
                },
                //样式变更回调函数
                styleChanged: function(styleName, styleValue) {
                    var copythis = this;
                    if (styleName == "color") {
                        if (styleValue != null) {
                            this.color = styleValue;
                        }

                        // console.log("this.color:"+this.color);
                        this.text.setStyle("color", this.color);
                    }




                    if (styleName == "color-click") {
                        if (styleValue != null) {
                            this.colorClick = styleValue;
                        }
                    }


                    if (styleName == "background-color") {
                        if (styleValue != null) {
                            this.backgroundColor = styleValue;

                        }

                        if (this.taginit == false) {

                            time.setTimeout(function() {
                                //console.log("修改了颜色");
                                //通过js修改颜色会受动画延迟影响，这里做个延迟
                                copythis.box.setStyle("background-color", copythis.backgroundColor);
                            }, 250);


                        } else {
                            this.box.setStyle("background-color", this.backgroundColor);
                        }

                    }
                    if (styleName == "background-color-click") {
                        if (styleValue != null) {
                            this.backgroundClickColor = styleValue;
                        }
                    }

                    if (styleName == "border-color-click") {
                        if (styleValue != null) {
                            this.borderClickColor = styleValue;
                        }
                    }
                    if (styleName == "border-color") {
                        if (styleValue != null) {
                            this.borderColor = styleValue;
                        }

                        this.box.setStyle("border-color", this.borderColor);
                    }


                    if (styleName == "tip-background-color") {
                        if (styleValue != null) {
                            this.tipbackgroundColor = styleValue;
                        }
                        this.tipbox.setStyle("background-color", this.tipbackgroundColor);

                    }
                    if (styleName == "tip-color") {
                        if (styleValue != null) {
                            this.tipColor = styleValue;
                        }
                        this.tiptext.setStyle("color", this.tipColor);

                    }

                    if (styleName == "font-size") {
                        if (styleValue != null) {
                            this.fontSize = styleValue;
                        }
                        this.text.setStyle("font-size", this.fontSize);
                        if (this.taginit == false) {

                            this.refresh();
                        }
                    }

                    if (styleName == "licon-width") {

                        if (styleValue != null) {
                            this.liconWidth = styleValue;
                        }
                        this.btn_image.setStyle("width", this.liconWidth);
                        if (this.taginit == false) {

                            this.refresh();
                        }
                    }

                    if (styleName == "licon-height") {

                        if (styleValue != null) {
                            this.liconHeight = styleValue;
                        }
                        this.btn_image.setStyle("height", this.liconHeight);
                        if (this.taginit == false) {

                            this.refresh();
                        }
                    }

                    if (styleName == "ricon-height") {

                        if (styleValue != null) {
                            this.riconHeight = styleValue;
                        }
                        this.btn_rimage.setStyle("height", this.riconHeight);
                        if (this.taginit == false) {

                            this.refresh();
                        }
                    }

                    if (styleName == "ricon-width") {

                        if (styleValue != null) {
                            this.riconWidth = styleValue;
                        }
                        this.btn_rimage.setStyle("height", this.riconWidth);

                        if (this.taginit == false) {

                            this.refresh();
                        }
                    }



                }
            }
            module.exports = Button;

        ]]>
    </script>
    <style>
        @import url("button.layout.css");
        @import url("button.color.css");
        .readonly {


            background-color: #ffffff;
            opacity: 0.7;
            flex-direction: row;
            align-items: center;
            padding: 0 0 0 0;
            margin: 0;
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            right: 0;
            visibility: hidden;
        }
    </style>
    <ui>
        <box class="ctrlbox" id="ctrlbox">

            <box id="btn" class="button">

                <image id="btn_image" class="button-image" style="display:none" />
                <box id="btn_content" class="row-flex-center">
                    <image id="loadingimage" style="width:15;height:15;display:none" class="button-image" src="loading.gif" />
                    <text id="text" class="button-text"></text>
                </box>
                <box id="tipbox" class="tip" style="display:none">
                    <text id="tiptext" class="tip-text">9</text>
                </box>
                <image id="btn_rimage" class="button-image" style="display:none" />
            </box>

            <box id="readonly" class="readonly" />

        </box>
    </ui>
</page>