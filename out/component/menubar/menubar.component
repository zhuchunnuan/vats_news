<!-- 
    样式：
    box公共样式；
    color：菜单文字颜色
    current-color：菜单文字选择颜色
    tip-color：气泡数字颜色
    tip-background-color：气泡背景颜色
    icon-width：菜单图标宽度
    icon-height：菜单图标高度
    font-size：菜单字体大小
    main-background-color：middleMain样式下，主菜单背景颜色
    main-transfer-y：主菜单基于当前坐标y偏移距离,
    main-transfer-x：主菜单基于基于当前坐标x偏移距离;
    
    text-margin: 菜单文字外边距
    icon-margin: 图片外边距
    注：自定义菜单样式通过js修改后，需重新loadData才生效


    属性：
    index：设置选中菜单项从0开始，如果不设置默认为第一个(通过js可以动态修改)
    mainicon；主菜单图片
    type：menubar样式（取值normal, middleMain）


    方法：
    公共方法,
    changeIndex(index)：设置选中菜单，外部调用   （变为内部使用，外部修改用设置index属性）
    loadData(json): 格式jsons.datas数组，属性如下
        itemJson.icon = "res:yuanhongqian/image/nxinxi.png";
        itemJson.iconCurrent = "res:yuanhongqian/image/nxinxi-active.png";
        itemJson.text = "消息";
        itemJson.isSmallTip = true;
        设置后tip值无效
        itemJson.tip = "4";

    menubarRefresh(): 如需通过js动态修改某个菜单的json属性值，可执行menubarRefresh()属性数据    

    clickMiddle();模拟点击中间菜单。

    事件：
    
    selectedItem:参数(e、index) 监听选中菜单标识
    middleMainClick：参数(e, tag:1标示已旋转 0标示还原) 监听主菜单点击事件
 -->
<page>
    <module>
        <![CDATA[
    
    ]]>
    </module>
    <script>
        <![CDATA[
            var document = require("Document");
            var window = require("Window");
            var time = require("Time");
            var ui = require("UI");
            var console = require("Console");
            var device = require("Device");

            var screenWidth_s = window.getScreenWidth();
            var screenHeight_s = window.getScreenHeight();
            var root = null;

            var Menubar = function() {
                this.menubar = null;
                this.mainitem = null;
                this.type = "normal";


                this.color = "#565656";
                this.currentColor = "#549FF7";
                this.tipColor = "#ffffff";
                this.tipbackgroundColor = "red";
                this.iconWidth = "25";
                this.iconHeight = "25";
                this.fontSize = "14";
                this.textMargin = "0 0 0 0";
                this.iconMargin = "0 25 0 25";


                this.index = 0;
                this.mainicon = "";
                this.mainbackgroundColor = "#549FF7";
                this.mainTransferY = 0;
                this.mainTransferX = 0;
                this.jsondatas = null;

                this.pathLocation = "";

                this.BeforeDom = null;


            }

            module.exports = Menubar;

            Menubar.prototype = {
                created: function() {
                    //这里是得到组件所在的uixml页面的绝对路径目录
                    this.pathLocation = document.getPathLocation();
                    root = document.getRootElement();
                    this.menubar = this.getElement("menubar");

                    this.init();

                    var copythis = this;
                    this.menubar.on("touchUp", function(e) {

                        var item = e.target;

                        if (item.hasAttr("itemindex")) {
                            var id = item.getAttr("itemindex");
                            var num = parseInt(id);
                            if (copythis.index != num) {
                                copythis.index = num;
                                copythis.changeIndex(num);
                            }

                        }
                    });
                },
                init: function() {





                },
                mainImageInsertBeforeDom: function(dom) {

                    this.BeforeDom = dom;


                },
                clickMiddle: function() {
                    this.mainitem.fire("touchUp");


                },
                //属性变更回调函数
                attrChanged: function(attrName, attrValue, taginit) {

                    if (attrName == "type") {
                        if (attrValue != null) {
                            this.type = attrValue;
                        }
                    }

                    if (attrName == "index") {

                        // console.log("第一次进来");
                        if (attrValue != null) {
                            this.index = attrValue;
                        }
                        if (this.jsondatas != null) {
                            // console.log("第二次进来");

                            this.changeIndex(this.index);
                        }
                    }
                    if (attrName == "mainicon") {
                        if (attrValue != null) {
                            //通过js进来的图片地址，都认为是基于uixml页面的相对路径，符合开发者思维
                            if (attrValue.indexOf("res:") > -1 || attrValue.indexOf("http://") > -1 || attrValue.indexOf("https://") > -1) {
                                this.mainicon = attrValue;
                            } else {
                                this.mainicon = this.pathLocation + "/" + attrValue;
                            }
                        }

                    }
                },
                //样式变更回调函数
                styleChanged: function(styleName, styleValue, taginit) {
                    if (styleName == "color") {
                        if (styleValue != null) {
                            this.color = styleValue;
                        }
                    }

                    if (styleName == "current-color") {
                        if (styleValue != null) {
                            this.currentColor = styleValue;
                        }
                    }
                    if (styleName == "tip-color") {
                        if (styleValue != null) {
                            this.tipColor = styleValue;
                        }
                    }

                    if (styleName == "tip-background-color") {
                        if (styleValue != null) {
                            this.tipbackgroundColor = styleValue;
                        }
                    }

                    if (styleName == "icon-width") {
                        if (styleValue != null) {
                            this.iconWidth = styleValue;
                        }
                    }
                    if (styleName == "icon-height") {
                        if (styleValue != null) {
                            this.iconHeight = styleValue;
                        }
                    }
                    if (styleName == "font-size") {
                        if (styleValue != null) {
                            this.fontSize = styleValue;
                        }
                    }
                    if (styleName == "main-background-color") {
                        if (styleValue != null) {
                            this.mainbackgroundColor = styleValue;
                        }
                    }

                    if (styleName == "main-transfer-y") {
                        if (styleValue != null) {
                            this.mainTransferY = styleValue;
                        }
                    }

                    if (styleName == "main-transfer-x") {
                        if (styleValue != null) {
                            this.mainTransferX = styleValue;
                        }
                    }


                    if (styleName == "text-margin") {
                        if (styleValue != null) {
                            this.textMargin = styleValue;
                        }
                    }

                    if (styleName == "icon-margin") {
                        if (styleValue != null) {
                            this.iconMargin = styleValue;
                        }
                    }
                },
                loadData: function(jsondatas) {
                    var copythis = this;

                    if (this.type == "middleMain") {
                        if (jsondatas.datas.length > 4) {
                            var jsondata = {
                                "content": "type为middleMain最多只能有4个菜单",
                                "duration": "1"
                            };
                            ui.toast(jsondata);
                            return;
                        }

                        if (jsondatas.datas.length % 2 == 1) {
                            var jsondata = {
                                "content": "type为middleMain菜单个数必须是偶数",
                                "duration": "1"
                            };
                            ui.toast(jsondata);
                            return;
                        }
                    } else {
                        if (jsondatas.datas.length > 6) {
                            var jsondata = {
                                "content": "最多只能有6个菜单",
                                "duration": "1"
                            };
                            ui.toast(jsondata);
                            return;
                        }
                    }

                    this.jsondatas = jsondatas;
                    //清空所有子节点
                    this.menubar.clear();
                    console.log("开始");

                    var menubarstr = '<box class="menubarbox">';

                    this.jsondatas.datas.forEach(function(itemjson, i) {

                        var src = "";
                        var color;
                        //因为这里的数据是外部通过js注入，内部无非判断图片路径是基于模板还是uixml这里做判断，按基于uixml处理，复合开发者的思维。
                        if ((itemjson.iconCurrent).indexOf("res:") > -1 || (itemjson.iconCurrent).indexOf("http://") > -1 || (itemjson.iconCurrent).indexOf("https://") > -1) {

                        } else {
                            itemjson.iconCurrent = copythis.pathLocation + "/" + itemjson.iconCurrent;
                        }
                        if ((itemjson.icon).indexOf("res:") > -1 || (itemjson.icon).indexOf("http://") > -1 || (itemjson.icon).indexOf("https://") > -1) {

                        } else {
                            itemjson.icon = copythis.pathLocation + "/" + itemjson.icon;
                        }

                        if (copythis.index == i) {
                            //因为这里的数据是外部通过js注入，内部无非判断图片路径是基于模板还是uixml这里做判断，按基于uixml处理，复合开发者的思维。                       
                            src = itemjson.iconCurrent;
                            color = copythis.currentColor;
                        } else {
                            src = itemjson.icon;
                            color = copythis.color;
                        }


                        var tipxml = '';
                        tipxml = '<box type="tipsmall" itemindex="' + i + '" style="background-color:' + copythis.tipbackgroundColor + ';display:none" class="menubar-item-tip-small"></box>';
                        tipxml = tipxml + '<box type="tip" itemindex="' + i + '" class="menubar-item-tip" style="background-color:' + copythis.tipbackgroundColor + ';display:none"><text class="menubar-item-tip-text" style="color:' + copythis.tipColor + '"></text></box>';

                        if (itemjson.isSmallTip != null && itemjson.isSmallTip == true) {

                            tipxml = '<box  type="tipsmall" itemindex="' + i + '" style="background-color:' + copythis.tipbackgroundColor + '" class="menubar-item-tip-small"></box>';
                            tipxml = tipxml + '<box  type="tip" itemindex="' + i + '" class="menubar-item-tip" style="background-color:' + copythis.tipbackgroundColor + ';display:none"><text class="menubar-item-tip-text" style="color:' + copythis.tipColor + '"></text></box>';
                        } else if (itemjson.tip != null && itemjson.tip != "") {
                            tipxml = '<box  type="tipsmall" itemindex="' + i + '" style="background-color:' + copythis.tipbackgroundColor + ';display:none" class="menubar-item-tip-small"></box>';

                            tipxml = tipxml + '<box  type="tip" itemindex="' + i + '" class="menubar-item-tip" style="background-color:' + copythis.tipbackgroundColor + '"><text class="menubar-item-tip-text" style="color:' + copythis.tipColor + '">' + itemjson.tip + '</text></box>';
                        }

                        var xmlstr = '<box   class="flex1 row-flex-center">' +
                            '<box itemindex="' + i + '"  class="menubar-item"  >' +
                            '  <image id="image_' + i + '" itemindex="' + i + '" class="menubar-item-image" src="' + src + '" style="width:' + copythis.iconWidth + ';height:' + copythis.iconHeight + ';margin:' + copythis.iconMargin + '"/>' +
                            ' <text id="text_' + i + '" itemindex="' + i + '" class="menubar-item-text" style="color:' + color + ';font-size:' + copythis.fontSize + ';margin:' + copythis.textMargin + '">' + itemjson.text + '</text>' +
                            '' + tipxml + '' +
                            ' </box>' +
                            '</box>';


                        menubarstr = menubarstr + xmlstr;
                        // var dom = document.createElementByXml(xmlstr, copythis);
                        // copythis.menubar.appendChild(dom);

                        if (copythis.type == "middleMain") {
                            if (i == (jsondatas.datas.length / 2 - 1)) {
                                var xmlstr = '<box class="flex1 row-flex-center">' +
                                    '<box id="mainitem" class="menubar-item-main" style="background-color:' + copythis.mainbackgroundColor + '">' +
                                    '<image class="menubar-item-main-image" src="' + copythis.mainicon + '"/>' +
                                    '</box>' +
                                    '</box>';

                                menubarstr = menubarstr + xmlstr;
                                //  var dom = document.createElementByXml(xmlstr, copythis);
                                //copythis.menubar.appendChild(dom);
                            }
                        }


                    });

                    menubarstr = menubarstr + '</box>';

                    var dom = document.createElementByXml(menubarstr, this);
                    this.menubar.appendChild(dom);

                    this.menubar.refresh();

                    console.log("结束");
                    if (this.type == "middleMain") {
                        this.mainitem = this.getElement("mainitem");
                        //console.log(mainitem);
                        var n = 0;
                        this.mainitem.on('touchUp', function(e) {

                            var jsonData = {};
                            var aniAry = new Array();

                            var jsonAni1 = {};
                            jsonAni1.delay = 0;
                            jsonAni1.duration = 150;
                            jsonAni1.curve = "linear";
                            jsonAni1.props = {};

                            if (n == 0) {
                                jsonAni1.props.rotation = 135;
                                n = 1;
                            } else {
                                jsonAni1.props.rotation = 0;
                                n = 0;
                            }


                            aniAry.push(jsonAni1);
                            jsonData.animators = aniAry;
                            copythis.mainitem.startAnimator(jsonData, function(code) {


                            });

                            var ary = new Array();
                            ary.push(n);
                            copythis.fire("middleMainClick", ary);

                        });


                        var copythis = this;

                        var tt = 50;

                        if (device.getOs() == "iOS") {
                            var tt = 0;

                        }
                        time.setTimeout(function() {
                            //android 在动态加载dom的时候getAbsoluteFrame 需要通过定时，才能获取到
                            var json = copythis.mainitem.getAbsoluteFrame();
                            if (copythis.BeforeDom == null) {
                                root.appendChild(copythis.mainitem);

                            } else {
                                root.insertBefore(copythis.mainitem, copythis.BeforeDom);
                            }

                            copythis.mainitem.setStyle("position", "absolute");
                            var mainitemfrme = copythis.mainitem.getFrame();
                            mainitemfrme.x = json.x + Number(copythis.mainTransferX);
                            mainitemfrme.y = json.y + Number(copythis.mainTransferY)
                            copythis.mainitem.setFrame(mainitemfrme);
                            copythis.mainitem.setStyle("left", json.x + Number(copythis.mainTransferX));

                            copythis.mainitem.setStyle("top", json.y + Number(copythis.mainTransferY));

                            //  root.refresh();

                        }, tt);

                    }
                    //发送menubar切换事件监听 因为同步回传信息有问题，这里需要用定时
                    var copythis = this;
                    time.setTimeout(function() {
                        copythis.setAttr("index", copythis.index);
                    }, 1);
                },
                orientationChanged: function(orientation, screenWidth, screenHeight) {
                    document.refresh();
                    if (this.type == "middleMain") {
                        var mainitem = null;
                        if (this.getElement("mainitem") != null) {
                            mainitem = this.getElement("mainitem");
                        } else {
                            mainitem = document.getElement("mainitem");
                        }

                        var nn = screenWidth / 2 - mainitem.getStyle("width") / 2 + Number(this.mainTransferX);

                        var mm = this.menubar.getAbsoluteFrame().y + Number(this.mainTransferY);

                        mainitem.setStyle("left", screenWidth / 2 - mainitem.getStyle("width") / 2 + Number(this.mainTransferX));
                        mainitem.setStyle("top", this.menubar.getAbsoluteFrame().y + Number(this.mainTransferY));
                        document.refresh();

                    }
                },
                changeIndex: function(num) {
                    var list = this.menubar.getFirstChild().getChildren();
                    var ll = list.length;

                    if (this.type == "middleMain") {
                        ll = ll - 1;
                    }
                    for (var i = 0; i < ll; i++) {
                        var imagedom = this.getElement("image_" + i);
                        var textdom = this.getElement("text_" + i);
                        if (num == i) {
                            imagedom.setAttr("src", this.jsondatas.datas[i].iconCurrent);
                            textdom.setStyle("color", this.currentColor);
                            //  console.log(this.jsondatas.datas[i].iconCurrent);
                        } else {

                            imagedom.setAttr("src", this.jsondatas.datas[i].icon);
                            textdom.setStyle("color", this.color);
                        }
                    }
                    var ary = new Array();
                    ary.push(num);
                    this.fire("selectedItem", ary);
                },
                menubarRefresh: function() {
                    var childarr = this.menubar.getChildren();
                    if (this.type == "middleMain") {
                        childarr.splice((childarr.length - 1) / 2, 1);
                    }

                    for (var i = 0; i < childarr.length; i++) {

                        if ((this.jsondatas.datas[i].iconCurrent).indexOf("res:") > -1 || (this.jsondatas.datas[i].iconCurrent).indexOf("http:") > -1 || (this.jsondatas.datas[i].iconCurrent).indexOf("https://") > -1) {

                        } else {
                            this.jsondatas.datas[i].iconCurrent = this.pathLocation + "/" + this.jsondatas.datas[i].iconCurrent;
                        }
                        if ((this.jsondatas.datas[i].icon).indexOf("res:") > -1 || (this.jsondatas.datas[i].icon).indexOf("http://") > -1 || (this.jsondatas.datas[i].icon).indexOf("https://") > -1) {

                        } else {
                            this.jsondatas.datas[i].icon = this.pathLocation + "/" + this.jsondatas.datas[i].icon;
                        }

                        var itemJson = this.jsondatas.datas[i];
                        var imagedom = childarr[i].getElements("image")[0];
                        var textdom = childarr[i].getElements("text")[0];
                        var rule = '[type="tip"]';
                        var tipdom = childarr[i].getElements(rule)[0];
                        var tiptextdom = null;
                        tiptextdom = tipdom.getFirstChild();
                        if (itemJson.tip != null && itemJson.tip != "" && itemJson.tip != "0") {
                            tiptextdom.setText(itemJson.tip);
                            tipdom.setStyle("display", "block");
                        } else {
                            tipdom.setStyle("display", "none");
                        }

                        var tipsmalldom = childarr[i].getElements('[type="tipsmall"]')[0];
                        if (itemJson.isSmallTip != null && itemJson.isSmallTip == true) {
                            tipsmalldom.setStyle("display", "block");
                            tipdom.setStyle("display", "none");
                        } else {
                            tipsmalldom.setStyle("display", "none");
                        }

                        if (this.index == i) {
                            if (itemJson.iconCurrent != null) {
                                imagedom.setAttr("src", itemJson.iconCurrent);
                            }
                        } else {

                            if (itemJson.icon != null) {
                                imagedom.setAttr("src", itemJson.icon);
                            }
                        }

                        if (itemJson.text != null) {
                            textdom.setText(itemJson.text);
                        }
                    }
                    this.menubar.refresh();
                }
            }
        ]]>
    </script>
    <style>
        @import url("menubar.layout.css");
        @import url("menubar.color.css");
    </style>
    <ui>
        <box id="menubar" class="menubar">

        </box>
    </ui>
</page>