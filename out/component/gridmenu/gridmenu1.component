<!-- 
    样式：
    grid公共样式;
    color:文字颜色
    color-click:文字点击颜色
    background-color-click:背景点击颜色
    icon-width:图片宽度
    icon-height:图片高度
    font-size:字体大小
    tip-color: 气泡颜色
    tip-background-color:气泡背景色
    item-background-color:网格背景色



    

    属性：
    grid公共属性；
    landcol:横屏切换时候的col
   


    方法：
    loadData(json): 格式jsons.datas数组，属性如下
        itemJson.icon = "res:yuanhongqian/image/nxinxi.png";
        itemJson.text = "消息";
        itemJson.isSmallTip = true;
        设置后tip值无效
        itemJson.tip = "4";
        

     gridmenuRefresh():  如果动态修改tip等值，需要执行gridmenuRefresh()


    事件：
    grid公共事件
    gridMenuClick 参数(e, index):监听gridmenu点击事件，返回点击标识

 -->
<page>
    <module>

        <![CDATA[
    
    ]]>

    </module>
    <script>
        <![CDATA[
            var document = require("Document");
            var window = require("Window");
            var screenWidth_s = window.getScreenWidth();
            var screenHeight_s = window.getScreenHeight();
            var console = require("Console");
            var ui = require("UI");

            var Gridmenu = function() {
                this.gridmenubox = null;
                this.gridmenu = null;
                this.jsondatas = null;
                this.tipColor = "#ffffff";
                this.tipbackgroundColor = "red";
                this.color = "#000000";
                this.colorClick = "#549FF7";
                this.backgroundColorClick = "#F5F5F5";
                this.itembackgroundColor = "#ffffff";

                this.iconWidth = "45";
                this.iconHeight = "45";
                this.fontSize = "13";

                this.col = "4";
                this.landcol = "8";

                this.pathLocation = "";


            };

            module.exports = Gridmenu;

            Gridmenu.prototype = {
                created: function() {
                    //这里是得到组件所在的uixml页面的绝对路径目录
                    this.pathLocation = document.getPathLocation();
                    this.gridmenu = this.getElement("gridmenu");
                    this.gridmenubox = this.getElement("gridmenubox");
                    this.init();

                    var copythis = this;

                    this.gridmenu.on("click", function(e) {

                        var item = e.target;

                        if (item.hasAttr("itemindex")) {
                            var id = item.getAttr("itemindex");
                            var num = parseInt(id);
                            var ary = new Array();
                            ary.push(num);
                            copythis.fire("gridMenuClick", ary);
                        }
                    });


                    this.gridmenu.on("touchDown", function(e) {

                        var item = e.target;

                        if (item.hasAttr("itemindex")) {
                            var id = item.getAttr("itemindex");
                            var num = parseInt(id);
                            var celldom = copythis.getElement("id_" + num);
                            var itemtext = copythis.getElement("itemtext_" + num);
                            celldom.setStyle("background-color", copythis.backgroundColorClick);
                            itemtext.setStyle("color", copythis.colorClick);

                        }
                    });

                    this.gridmenu.on("touchUp", function(e) {

                        var item = e.target;

                        if (item.hasAttr("itemindex")) {
                            var id = item.getAttr("itemindex");
                            var num = parseInt(id);
                            var celldom = copythis.getElement("id_" + num);
                            var itemtext = copythis.getElement("itemtext_" + num);
                            celldom.setStyle("background-color", "#ffffff");
                            itemtext.setStyle("color", copythis.color);

                        }
                    });

                    this.gridmenu.on("touchCancel", function(e) {

                        var item = e.target;

                        if (item.hasAttr("itemindex")) {
                            var id = item.getAttr("itemindex");
                            var num = parseInt(id);
                            var celldom = copythis.getElement("id_" + num);
                            var itemtext = copythis.getElement("itemtext_" + num);
                            celldom.setStyle("background-color", "#ffffff");
                            itemtext.setStyle("color", copythis.color);

                        }
                    });




                },
                init: function() {

                    this.setStyle("tip-color", this.getStyle("tip-color"));
                    this.setStyle("tip-background-color", this.getStyle("tip-background-color"));
                    this.setStyle("color", this.getStyle("color"));
                    this.setStyle("color-click", this.getStyle("color-click"));
                    this.setStyle("background-color-click", this.getStyle("background-color-click"));
                    this.setStyle("icon-width", this.getStyle("icon-width"));
                    this.setStyle("icon-height", this.getStyle("icon-height"));
                    this.setStyle("font-size", this.getStyle("font-size"));

                    this.setStyle("item-background-color", this.getStyle("item-background-color"));

                    if (screenWidth_s > screenHeight_s) {
                        this.setAttr("landcol", this.getAttr("landcol"));

                    } else {
                        this.setAttr("col", this.getAttr("col"));
                    }
                },
                loadData: function(jsondatas) {
                    var isRefresh = true;
                    if (arguments[1] == null) {
                        isRefresh = true;
                    } else if (arguments[1] == true) {
                        isRefresh = true;
                    } else if (arguments[1] == false) {

                        isRefresh = false;
                    }
                    this.jsondatas = jsondatas;
                    this.gridmenu.clear();

                    for (var i = 0; i < jsondatas.datas.length; i++) {

                        var tipxml = '';

                        if ((jsondatas.datas[i].icon).indexOf("res:") > -1 || (jsondatas.datas[i].icon).indexOf("http://") > -1 || (jsondatas.datas[i].icon).indexOf("https://") > -1) {

                        } else {

                            jsondatas.datas[i].icon = this.pathLocation + "/" + jsondatas.datas[i].icon;
                        }


                        tipxml = '<box type="tipsmall" itemindex="' + i + '" style="background-color:' + this.tipbackgroundColor + ';display:none" class="gridmenu-item-tip-small"></box>';

                        tipxml = tipxml + '<box type="tip" itemindex="' + i + '" class="gridmenu-item-tip" style="background-color:' + this.tipbackgroundColor + ';display:none"><text class="gridmenu-item-tip-text" style="color:' + this.tipColor + '"></text></box>';

                        if (jsondatas.datas[i].isSmallTip != null && jsondatas.datas[i].isSmallTip == true) {

                            tipxml = '<box type="tipsmall" itemindex="' + i + '" style="background-color:' + this.tipbackgroundColor + '" class="gridmenu-item-tip-small"></box>';

                            tipxml = tipxml + '<box type="tip" itemindex="' + i + '" class="gridmenu-item-tip" style="background-color:' + this.tipbackgroundColor + ';display:none"><text class="gridmenu-item-tip-text" style="color:' + this.tipColor + '"></text></box>';
                        } else if (jsondatas.datas[i].tip != null && jsondatas.datas[i].tip != "" && jsondatas.datas[i].tip != "0") {

                            tipxml = '<box type="tipsmall" itemindex="' + i + '" style="background-color:' + this.tipbackgroundColor + ';display:none" class="gridmenu-item-tip-small"></box>';

                            tipxml = tipxml + '<box type="tip" itemindex="' + i + '" class="gridmenu-item-tip" style="background-color:' + this.tipbackgroundColor + '"><text class="gridmenu-item-tip-text" style="color:' + this.tipColor + '">' + jsondatas.datas[i].tip + '</text></box>';
                        }


                        var xmlstr = '<box id="id_' + i + '" itemindex="' + i + '" class="row-flex-center" style="background-color:' + this.itembackgroundColor + '"> ' +
                            '<box itemindex="' + i + '" class="column-flex-center" > ' +
                            ' <image itemindex="' + i + '" style="width:' + this.iconWidth + ';height:' + this.iconHeight + ';" class="gridmenu-image" src="' + jsondatas.datas[i].icon + '"/>' +
                            '<text id="itemtext_' + i + '" itemindex="' + i + '" style="margin:8 0 4 0;color:' + this.color + ';font-size:' + this.fontSize + ';">' + jsondatas.datas[i].text + '</text>' +
                            '' + tipxml + '' +
                            '</box>' +
                            '</box>';

                        var dom = document.createElementByXml(xmlstr, this);
                        this.gridmenu.appendChild(dom);

                    }


                    if (isRefresh == true) {

                        this.gridmenu.refresh();
                    }



                },
                gridmenuRefresh: function() {
                    var childarr = this.gridmenu.getChildren();
                    for (var i = 0; i < childarr.length; i++) {
                        if ((this.jsondatas.datas[i].icon).indexOf("res:") > -1 || (this.jsondatas.datas[i].icon).indexOf("http:") > -1 || (this.jsondatas.datas[i].icon).indexOf("https://") > -1) {

                        } else {
                            this.jsondatas.datas[i].icon = this.pathLocation + "/" + this.jsondatas.datas[i].icon;
                        }

                        var itemJson = this.jsondatas.datas[i];
                        var imagedom = childarr[i].getElements("image")[0];
                        var textdom = childarr[i].getElements("text")[0];
                        var rule = '[type="tip"]';
                        var tipdom = childarr[i].getElements(rule)[0];
                        var tiptextdom = null;
                        tiptextdom = tipdom.getFirstChild();
                        if (itemJson.tip != null && itemJson.tip != "" && itemJson.tip != "0") {
                            tiptextdom.setText(itemJson.tip);
                            tipdom.setStyle("display", "block");
                        } else {

                            tipdom.setStyle("display", "none");
                        }

                        var tipsmalldom = childarr[i].getElements('[type="tipsmall"]')[0];
                        if (itemJson.isSmallTip != null && itemJson.isSmallTip == true) {


                            tipsmalldom.setStyle("display", "block");
                            tipdom.setStyle("display", "none");

                            // console.log(tipsmalldom);
                        } else {
                            tipsmalldom.setStyle("display", "none");
                        }

                        if (itemJson.icon != null) {
                            imagedom.setAttr("src", itemJson.icon);

                        }

                        if (itemJson.text != null) {
                            textdom.setText(itemJson.text);

                        }
                    }

                    this.gridmenu.refresh();



                },
                orientationChanged: function(orientation, screenWidth, screenHeight) {
                    screenWidth_s = screenWidth;
                    screenHeight_s = screenHeight;
                    //console.log("screenWidth_s:"+screenWidth_s);
                    if (orientation == "landscape") {

                        this.setAttr("landcol", this.getAttr("landcol"));
                    }

                    if (orientation == "portrait") {
                        this.setAttr("col", this.getAttr("col"));
                    }



                },

                //属性变更回调函数
                attrChanged: function(attrName, attrValue) {
                    if (attrName == "col") {
                        if (attrValue != null) {
                            this.col = attrValue;
                        }
                        // console.log("this.col:"+this.col);
                        this.gridmenu.setAttr("col", this.col);
                    }

                    if (attrName == "landcol") {
                        if (attrValue != null) {
                            this.landcol = attrValue;
                        } else {
                            this.landcol = this.col;
                        }
                        // console.log("this.col:"+this.col);
                        if (screenWidth_s > screenHeight_s) {
                            //   console.log("this.col:" + this.col);
                            this.gridmenu.setAttr("col", this.landcol);
                        }
                    }


                },
                //样式变更回调函数
                styleChanged: function(styleName, styleValue) {
                    if (styleName == "color") {
                        if (styleValue != null) {
                            this.color = styleValue;
                        }

                    }
                    if (styleName == "tip-color") {
                        if (styleValue != null) {
                            this.tipColor = styleValue;
                        }

                    }
                    if (styleName == "tip-background-color") {
                        if (styleValue != null) {
                            this.tipbackgroundColor = styleValue;
                        }

                    }

                    if (styleName == "color-click") {
                        if (styleValue != null) {
                            this.colorClick = styleValue;
                        }

                    }

                    if (styleName == "background-color-click") {
                        if (styleValue != null) {
                            this.backgroundColorClick = styleValue;
                        }

                    }


                    if (styleName == "item-background-color") {
                        if (styleValue != null) {
                            this.itembackgroundColor = styleValue;
                        }

                    }

                    if (styleName == "icon-width") {
                        if (styleValue != null) {
                            this.iconWidth = styleValue;
                        }

                    }

                    if (styleName == "icon-height") {
                        if (styleValue != null) {
                            this.iconHeight = styleValue;
                        }
                    }

                    if (styleName == "font-size") {
                        if (styleValue != null) {
                            this.fontSize = styleValue;
                        }
                    }
                }
            }
        ]]>
    </script>
    <style>
        @import url("gridmenu.layout.css");
        @import url("gridmenu.color.css");
    </style>
    <ui>

        <grid id="gridmenu" class="gridmenu">

        </grid>
    </ui>
</page>