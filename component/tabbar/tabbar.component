<!-- 
    样式：
    box公共样式;
    color:文字颜色
    current-color: 选中的颜色（包含文字和滑动条颜色）
    font-max-size: 最大字号
    font-min-size:最小字号
    

    

    属性：
    bindid:绑定slider控件的id，注意只能是slider控件,绑定后通过设置slider的index可以切换tabbar
   


    方法：
    公共方法；
    loadData(json) : 加载数据
    json.datas 数组属性
        var itemJson = {};
        
        itemJson.text = "头条";
          
        datas.push(itemJson);

    setPageScroll(param) param是json对象，结合slider控件使用，元素为  param.position，param.direction， param.offset;
    该方法已经变成内部使用，不提供外部调用。

 
    事件：
   暂无

 -->
<page>
    <module>

        <![CDATA[
        
    ]]>

    </module>
    <script>
        <![CDATA[
            var document = require("Document");
            var window = require("Window");
            var screenWidth = window.getScreenWidth();
            var ui = require("UI");
            var console = require("Console");
            var encryption = require("Encryption");
            var ui = require("UI");
            var Tabbar = function() {
                this.sliderScroll = null;
                this.sliderIndex = null;
                this.currentColor = "#549FF7";
                this.color = "#000000";
                this.jsondatas = null;
                this.currentRed = 84;
                this.currentGreen = 159;
                this.currentBlue = 247;
                this.normalRed = 0;
                this.normalGreen = 0;
                this.normalBlue = 0;

                this.w_r = 0;
                this.oldposition = 0;
                this.childrenObj = null;
                this.childrenFrame = [];
                this.position_index = 0;
                this.bindid = null;
                this.sliderdom = null;

                this.fontMax = 18;
                this.fontMin = 15;
            };

            module.exports = Tabbar;

            Tabbar.prototype = {
                created: function() {
                    this.sliderScroll = this.getElement("sliderScroll");
                    this.init();
                    var copythis = this;
                    this.sliderScroll.on("click", function(e) {
                        var ctrlobj = e.target;
                        var ctrltarget = ctrlobj.getTag();
                        copythis.position_index = 0;
                        if (ctrltarget == "text") {
                            for (var i = 0; i < copythis.childrenObj.length; i++) {
                                if (ctrlobj.getText() == copythis.childrenObj[i].getFirstChild().getText()) {
                                    copythis.position_index = i;
                                    copythis.childrenObj[i].getFirstChild().setClassStyle("tabbar-text-box-text-index", copythis);
                                    copythis.childrenObj[i].getFirstChild().setStyle("color", copythis.currentColor);
                                } else {
                                    copythis.childrenObj[i].getFirstChild().setClassStyle("tabbar-text-box-text", copythis);
                                    copythis.childrenObj[i].getFirstChild().setStyle("color", copythis.color);
                                }
                            }
                            // copythis.sliderScroll.refresh();
                        } else if (ctrltarget == "box") {
                            for (var i = 0; i < copythis.childrenObj.length; i++) {
                                if (ctrlobj.getFirstChild().getText() == copythis.childrenObj[i].getFirstChild().getText()) {
                                    copythis.position_index = i;
                                    copythis.childrenObj[i].getFirstChild().setClassStyle("tabbar-text-box-text-index", copythis);
                                    copythis.childrenObj[i].getFirstChild().setStyle("color", copythis.currentColor);
                                } else {
                                    copythis.childrenObj[i].getFirstChild().setClassStyle("tabbar-text-box-text", copythis);
                                    copythis.childrenObj[i].getFirstChild().setStyle("color", copythis.color);
                                }
                            }
                            // copythis.sliderScroll.refresh();
                        }

                        //sliderid.setAttr("index",position_index);
                        // 这里要传出去
                        /*var ary = new Array();
                        ary.push(copythis.position_index);
                         
                        copythis.fire("tabbarSelected",ary);*/
                        copythis.sliderdom.setAttr("index", copythis.position_index);
                    });
                },

                setIndex: function() {
                    // console.log(JSON.stringify(this.jsondatas));
                },
                binddom: function(dom) {
                    this.sliderdom = dom;



                },
                init: function() {
                    // this.setStyle("current-color", this.getStyle("current-color") == null ? this.currentColor : this.getStyle("current-color"));
                    // this.setStyle("color", this.getStyle("color") == null ? this.color : this.getStyle("color"));
                },
                loadData: function(jsondatas) {
                    var copythis = this;
                    if (this.getAttr("bindid") != null || this.sliderdom != null) {
                        this.bindid = this.getAttr("bindid");

                        // var pd = this.getParent();

                        if (this.sliderdom == null) {
                            if (document.getElement(this.bindid) == null) {
                                var jsondata = {
                                    "content": "在模板里面使用需要先调用binddom()方法",
                                    "duration": "1"
                                };
                                ui.toast(jsondata);
                                return;

                            } else {
                                this.sliderdom = document.getElement(this.bindid);
                            }

                        }



                        if (this.sliderdom.getAttr("index") == null) {
                            this.position_index = 0;
                        } else {
                            this.position_index = this.sliderdom.getAttr("index");
                        }
                        //为防止多次执行loadData时，多次注册事件，这里先执行清除
                        this.sliderdom.off("pageScroll", callbackscoll);
                        this.sliderdom.on("pageScroll", callbackscoll);

                        function callbackscoll(e, param) {
                            //这里比较是为了防止里面有slider组件 网上冒泡，而监听到了。 
                            if (e.target == copythis.sliderdom) {
                                var position = param.position;
                                var direction = param.direction;
                                var offset = param.offset;
                                copythis.setPageScroll(param);
                            }

                        }
                    } else {
                        var jsondata = {
                            "content": "需要绑定slider控件才可使用",
                            "duration": "1"
                        };
                        ui.toast(jsondata);
                        return;
                    }

                    this.jsondatas = jsondatas;
                    this.sliderScroll.clear();
                    for (i = 0; i < jsondatas.datas.length; i++) {
                        var indexxmlstr = '';
                        var color = this.color;
                        var indexclass = 'tabbar-text-box-text';
                        if (i == 0) {
                            indexclass = "tabbar-text-box-text-index";
                            indexxmlstr = '<box id="sliderIndex"  class="tabbar-text-box-line-index" style="background-color:' + this.currentColor + '"/>';
                            color = this.currentColor;
                        }
                        var xmlstr = '<box id="tabbaritem_' + i + '"  class="tabbar-text-box" >' +
                            '<text   class="' + indexclass + '" style="color:' + color + ';flex:1">' + jsondatas.datas[i].text + '</text>' +
                            '' + indexxmlstr + '' +
                            '</box>';
                        var dom = document.createElementByXml(xmlstr, this);
                        this.sliderScroll.appendChild(dom);
                    }
                    this.sliderScroll.refresh();

                    this.childrenObj = this.sliderScroll.getChildren();





                    this.sliderIndex = this.getElement("sliderIndex");
                    //把sliderIndex添加到外层的scroll容器里面
                    this.sliderScroll.appendChild(this.sliderIndex);
                    //var tabbarw = this.sliderScroll.getFrame().width;
                    var tabbarw = 0;
                    for (var i = 0; i < this.childrenObj.length; i++) {




                        var childrenObj_getFirstChild = this.childrenObj[i].getFirstChild();
                        if (this.position_index == i) {
                            this.sliderIndex.setStyle("left", tabbarw);
                            this.sliderIndex.setStyle("width", this.childrenObj[i].getFrame().width + 20);
                            childrenObj_getFirstChild.setStyle("color", this.currentColor);

                            childrenObj_getFirstChild.setStyle("font-size", this.fontMax);
                            childrenObj_getFirstChild.setClassStyle("tabbar-text-box-text-index", this);
                            this.oldposition = i;
                        } else {
                            childrenObj_getFirstChild.setStyle("color", this.color);
                            childrenObj_getFirstChild.setStyle("font-size", this.fontMin);
                            childrenObj_getFirstChild.setClassStyle("tabbar-text-box-text", this);
                        }
                        //这里动态设置每个box的宽度 
                        var cw = this.childrenObj[i].getFrame().width;
                        // console.log("cw:"+cw);
                        this.childrenObj[i].setStyle("width", cw + 20);
                        childrenObj_getFirstChild.setStyle("width", cw + 20);;
                        tabbarw = tabbarw + cw + 20;
                    }
                    //  console.log("tabbarw:"+tabbarw+";screenWidth:"+screenWidth);
                    screenWidth = copythis.sliderScroll.getFrame().width;


                    if (screenWidth >= tabbarw) {
                        for (var i = 0; i < this.childrenObj.length; i++) {

                            if (this.position_index == i) {
                                this.sliderIndex.setStyle("width", screenWidth / this.childrenObj.length);
                            }
                            this.childrenObj[i].setStyle("width", screenWidth / this.childrenObj.length);
                        }
                    }
                    copythis.sliderScroll.refresh();

                    for (var i = 0; i < this.childrenObj.length; i++) {
                        this.childrenFrame.push(this.childrenObj[i].getFrame());
                    }



                },
                setPageScroll: function(param) {
                    var position = param.position;
                    var direction = param.direction;
                    var offset = param.offset;

                    // console.log(";position:" + position + ";direction:" + direction + ";offset:" + offset);
                    var slider_index_json = this.sliderIndex.getFrame();

                    var red = Number(this.currentRed);
                    var green = Number(this.currentGreen);
                    var blue = Number(this.currentBlue);
                    //边缘会有弹性，这里判断offset=0时，不执行
                    if (offset == 0 && position == 0) {
                        var json = {};
                        json.animated = true;
                        json.domObj = this.childrenObj[0];
                        this.sliderScroll.scrollToCtrl(json);
                        return;
                    }


                    if (offset == 0 && position == this.childrenObj.length - 1) {
                        var json = {};
                        json.animated = true;
                        json.domObj = this.childrenObj[position];
                        this.sliderScroll.scrollToCtrl(json);
                        return;
                    }


                    //左滑
                    if (direction == 0) {
                        //得到当前滑动了第几个容器，由于快速滑动postion不会变，根据offset+postion一起判断
                        var n = Math.floor(offset) + position;
                        // console.log(offset+"左滑回弹"+n);
                        //判断是否滑动到最后一个
                        if ((n + 1) == this.childrenObj.length) {
                            if (offset - Math.floor(offset) > 0) {
                                return;
                            }
                            var x_length = 0;
                            for (i = 0; i < n; i++) {
                                x_length = x_length + this.childrenFrame[i].width;
                            }
                            slider_index_json.x = x_length;
                            slider_index_json.width = this.childrenFrame[n].width;
                            this.sliderIndex.setFrame(slider_index_json);
                            this.sliderIndex.setStyle("left", slider_index_json.x);
                            this.w_r = x_length;
                            this.childrenObj[n].getFirstChild().setStyle("font-size", this.fontMax);
                            this.childrenObj[this.oldposition].getFirstChild().setStyle("font-size", this.fontMin);
                            this.oldposition = n;

                            var json = {};
                            json.animated = true;
                            json.domObj = this.childrenObj[n];
                            this.sliderScroll.scrollToCtrl(json);
                            //this.refresh();
                            //console.log(";position:"+position+";direction:"+direction+";offset:"+offset);
                            return;
                        }


                        //记录当前滑动条离容器最左边的距离
                        var x_length = 0;
                        for (i = 0; i < n; i++) {
                            x_length = x_length + this.childrenFrame[i].width;
                        }
                        this.w_r = x_length;
                        //  console.log("左滑：w_r:");
                        //计算滑动比例
                        var s = (offset + position) - n;
                        //当前位置滑动条宽度
                        var current_width = this.childrenFrame[n].width;
                        //下一个位置滑动条的宽度
                        var next_width = this.childrenFrame[n + 1].width;
                        //算出滑动距离
                        slider_index_json.x = this.w_r + s * current_width;
                        slider_index_json.width = current_width + (next_width - current_width) * s;
                        this.sliderIndex.setFrame(slider_index_json);
                        this.sliderIndex.setStyle("left", slider_index_json.x);
                        this.childrenObj[n].getFirstChild().setStyle("font-size", this.fontMax - (this.fontMax - this.fontMin) * s);
                        this.childrenObj[n + 1].getFirstChild().setStyle("font-size", this.fontMin + (this.fontMax - this.fontMin) * s);

                        // console.log("s:"+s);
                        red = Number(this.normalRed) * s + (1 - s) * Number(this.currentRed);
                        green = Number(this.normalGreen) * s + (1 - s) * Number(this.currentGreen);
                        blue = Number(this.normalBlue) * s + (1 - s) * Number(this.currentBlue);
                        var color = "rgb(" + red + "," + green + "," + blue + ")";
                        // console.log(color);
                        this.childrenObj[n].getFirstChild().setStyle("color", color);
                        //右侧tab色值变换
                        red = Number(this.currentRed) * s + (1 - s) * Number(this.normalRed);
                        green = Number(this.currentGreen) * s + (1 - s) * Number(this.normalGreen);
                        blue = Number(this.currentBlue) * s + (1 - s) * Number(this.normalBlue);
                        var color = "rgb(" + red + "," + green + "," + blue + ")";
                        this.childrenObj[n + 1].getFirstChild().setStyle("color", color);
                        //这里解决间隔切换的问题
                        if (n != 0 && offset > 1) {
                            this.childrenObj[this.oldposition].getFirstChild().setStyle("font-size", this.fontMin);
                            this.childrenObj[this.oldposition].getFirstChild().setStyle("color", this.color);
                        }
                        this.oldposition = n;
                        if ((n + 1) != this.childrenObj.length) {
                            // console.log(n + ":n :" + (offset + position));
                            if (n == (offset + position)) {
                                //松手的时候 判断下 是否相等，然后做容器滑动
                                var json = {};
                                json.animated = true;
                                json.domObj = this.childrenObj[n + 1];
                                this.sliderScroll.scrollToCtrl(json);


                            }

                        }
                    } else {
                        var n = position - Math.floor(offset);

                        if (n == this.childrenObj.length - 1) {
                            //由于反弹会进入，到右边最后一个
                            var json = {};
                            json.animated = true;
                            json.domObj = this.childrenObj[n];
                            this.sliderScroll.scrollToCtrl(json);


                        }

                        var x_length = 0;
                        for (i = 0; i < n; i++) {
                            x_length = x_length + this.childrenFrame[i].width;
                        }
                        this.w_r = x_length;

                        if (position == 0)
                            return;

                        // console.log("n:" + n);
                        if (n == 0) {

                            if (offset - Math.floor(offset) > 0) {

                                return;
                            }
                            slider_index_json.x = 0;
                            slider_index_json.width = this.childrenObj[0].getFrame().width;
                            this.sliderIndex.setFrame(slider_index_json);
                            this.sliderIndex.setStyle("left", slider_index_json.x);
                            this.w_r = 0;
                            this.childrenObj[0].getFirstChild().setStyle("font-size", this.fontMax);
                            this.childrenObj[this.oldposition].getFirstChild().setStyle("font-size", this.fontMin);
                            this.oldposition = 0;

                            var json = {};
                            json.animated = true;
                            json.domObj = this.childrenObj[0];
                            this.sliderScroll.scrollToCtrl(json);

                            return;
                        }

                        var s = (offset + n) - position;

                        var next_width = this.childrenFrame[n - 1].width;
                        slider_index_json.x = this.w_r - s * next_width;
                        var current_width = this.childrenFrame[n].width;

                        slider_index_json.width = current_width + (next_width - current_width) * s;
                        this.sliderIndex.setFrame(slider_index_json);
                        this.sliderIndex.setStyle("left", slider_index_json.x);
                        // slider_index.setStyle("bottom",0);
                        this.childrenObj[n].getFirstChild().setStyle("font-size", this.fontMax - (this.fontMax - this.fontMin) * s);
                        this.childrenObj[n - 1].getFirstChild().setStyle("font-size", this.fontMin + (this.fontMax - this.fontMin) * s);
                        // console.log("bbb:" + this.fontMin);
                        // console.log("sss:" + (this.fontMin + (this.fontMax - this.fontMin) * s));
                        //这里解决间隔切换的问题
                        if ((n + 1) != this.childrenObj.length && offset > 1) {
                            this.childrenObj[this.oldposition].getFirstChild().setStyle("font-size", this.fontMin);
                            this.childrenObj[this.oldposition].getFirstChild().setStyle("color", this.color);
                        }
                        this.oldposition = n;
                        // red = red + (0-red)*s;
                        // green = green + (0-green)*s;
                        // blue = blue + (0-blue)*s;
                        red = Number(this.normalRed) * s + (1 - s) * Number(this.currentRed);
                        green = Number(this.normalGreen) * s + (1 - s) * Number(this.currentGreen);
                        blue = Number(this.normalBlue) * s + (1 - s) * Number(this.currentBlue);
                        var color = "rgb(" + red + "," + green + "," + blue + ")";
                        this.childrenObj[n].getFirstChild().setStyle("color", color);
                        //左侧tab色值变换
                        red = Number(this.currentRed) * s + (1 - s) * Number(this.normalRed);
                        green = Number(this.currentGreen) * s + (1 - s) * Number(this.normalGreen);
                        blue = Number(this.currentBlue) * s + (1 - s) * Number(this.normalBlue);
                        var color = "rgb(" + red + "," + green + "," + blue + ")";
                        this.childrenObj[n - 1].getFirstChild().setStyle("color", color);
                        //var ctrlid =  childrenObj[n-1].getId();
                        //通过控对象滚动

                        if (n == (position - offset)) {
                            //松手的时候 判断下 是否相等，然后做容器滑动
                            var json = {};
                            json.animated = true;
                            json.domObj = this.childrenObj[n - 1];
                            this.sliderScroll.scrollToCtrl(json);
                        }

                    }
                    //this.refresh();
                },
                //属性变更回调函数
                attrChanged: function(attrName, attrValue) {

                },
                //样式变更回调函数
                styleChanged: function(styleName, styleValue) {
                    if (styleName == "current-color") {
                        // console.log(styleValue);
                        if (styleValue != null) {
                            this.currentColor = styleValue;
                        }

                        var rgbstr = {};
                        if (this.currentColor.indexOf("#") > -1) {
                            rgbstr = encryption.hexToRgb(this.currentColor);
                            if (rgbstr == null) {
                                var jsondata = {
                                    "content": "颜色只能设置#xxxxxx形式",
                                    "duration": "1"
                                };
                                ui.toast(jsondata);
                                return;
                            }
                        } else if (this.currentColor.indexOf("rgb") > -1) {
                            var colorstr = this.currentColor.replace(/rgba?\((.*)\)/g, "$1");
                            rgbstr.red = colorstr.split(",")[0];
                            rgbstr.green = colorstr.split(",")[1];
                            rgbstr.blue = colorstr.split(",")[2];

                        }
                        this.currentRed = rgbstr.red;
                        this.currentGreen = rgbstr.green;
                        this.currentBlue = rgbstr.blue;
                        // console.log("this.currentColor;"+ this.currentRed +";"+this.currentGreen+";"+this.currentBlue);
                    }

                    if (styleName == "color") {
                        if (styleValue != null) {
                            this.color = styleValue;
                        }
                        var rgbstr = {};
                        if (this.color.indexOf("#") > -1) {
                            rgbstr = encryption.hexToRgb(this.color);
                            if (rgbstr == null) {
                                var jsondata = {
                                    "content": "颜色只能设置#xxxxxx形式",
                                    "duration": "1"
                                };
                                ui.toast(jsondata);
                                return;
                            }
                        } else if (this.color.indexOf("rgb") > -1) {
                            var colorstr = this.color.replace(/rgb\((.*)\)/g, "$1");
                            rgbstr.red = colorstr.split(",")[0];
                            rgbstr.green = colorstr.split(",")[1];
                            rgbstr.blue = colorstr.split(",")[2];


                        }

                        //rgbstr =    rgbstr.replace(/rgb\((.*)\)/g,"$1");



                        this.normalRed = rgbstr.red;
                        this.normalGreen = rgbstr.green;
                        this.normalBlue = rgbstr.blue;
                    }


                    if (styleName == "font-max-size") {
                        if (styleValue != null) {
                            this.fontMax = Number(styleValue);
                        }

                    }

                    if (styleName == "font-min-size") {
                        if (styleValue != null) {
                            this.fontMin = Number(styleValue);
                        }

                    }
                }
            }
        ]]>
    </script>
    <style>
        @import url("tabbar.layout.css");
        @import url("tabbar.color.css");
    </style>
    <ui>
        <scroll id="sliderScroll" direction="horizontal" scrollbar="false" class="tabbar">
        </scroll>
    </ui>
</page>